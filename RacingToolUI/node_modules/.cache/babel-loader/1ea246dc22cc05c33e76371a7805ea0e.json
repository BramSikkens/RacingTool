{"ast":null,"code":"//Voor observer\nexport default class ApplicationState {\n  constructor() {\n    this.observers = [];\n    this.organisatie = void 0;\n  }\n\n  attach(observer) {\n    this.observers.push(observer);\n  }\n\n  detach(observer) {\n    this.observers = this.observers.filter(observer => observerToRemove !== observer);\n  }\n\n  notify(applicationState) {\n    console.log(\"notify observers\");\n    this.observers.forEach(observer => observer(applicationState));\n  }\n\n  static getInstance() {\n    if (!ApplicationState.instance) {\n      ApplicationState.instance = new ApplicationState();\n    }\n\n    return ApplicationState.instance;\n  }\n\n}\nApplicationState.instance = void 0;","map":{"version":3,"sources":["/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/PropagandaSysteem/src/ApplicationLayer/ApplicationState.ts"],"names":["ApplicationState","constructor","observers","organisatie","attach","observer","push","detach","filter","observerToRemove","notify","applicationState","console","log","forEach","getInstance","instance"],"mappings":"AAGA;AAIA,eAAe,MAAMA,gBAAN,CAAuB;AAE5BC,EAAAA,WAAW,GAAG;AAAA,SAEdC,SAFc,GAE0B,EAF1B;AAAA,SAwBtBC,WAxBsB;AAAE;;AAIjBC,EAAAA,MAAM,CAACC,QAAD,EAAqC;AAChD,SAAKH,SAAL,CAAeI,IAAf,CAAoBD,QAApB;AACD;;AAEDE,EAAAA,MAAM,CAACF,QAAD,EAAmC;AACvC,SAAKH,SAAL,GAAiB,KAAKA,SAAL,CAAeM,MAAf,CAAsBH,QAAQ,IAAII,gBAAgB,KAAKJ,QAAvD,CAAjB;AACD;;AAEMK,EAAAA,MAAM,CAACC,gBAAD,EAAqC;AAChDC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,SAAKX,SAAL,CAAeY,OAAf,CAAwBT,QAAD,IAAcA,QAAQ,CAACM,gBAAD,CAA7C;AACD;;AAEwB,SAAXI,WAAW,GAAqB;AAC5C,QAAI,CAACf,gBAAgB,CAACgB,QAAtB,EAAgC;AAC9BhB,MAAAA,gBAAgB,CAACgB,QAAjB,GAA4B,IAAIhB,gBAAJ,EAA5B;AACD;;AACD,WAAOA,gBAAgB,CAACgB,QAAxB;AACD;;AAxBmC;AAAjBhB,gB,CACJgB,Q","sourcesContent":["import Organisatie from \"../DomainLayer/Entities/Organisatie\";\nimport IPersistable from \"./IPersistable\";\n\n//Voor observer\nexport type ApplicationStateObserver = (\n  applicationState: ApplicationState\n) => void;\nexport default class ApplicationState {\n  private static instance: ApplicationState;\n  private constructor() {}\n\n  private observers: ApplicationStateObserver[] = [];\n\n  public attach(observer: ApplicationStateObserver) {\n    this.observers.push(observer);\n  }\n\n  detach(observer:ApplicationStateObserver){\n    this.observers = this.observers.filter(observer => observerToRemove !== observer);\n  }\n\n  public notify(applicationState: ApplicationState) {\n    console.log(\"notify observers\");\n    this.observers.forEach((observer) => observer(applicationState));\n  }\n\n  public static getInstance(): ApplicationState {\n    if (!ApplicationState.instance) {\n      ApplicationState.instance = new ApplicationState();\n    }\n    return ApplicationState.instance;\n  }\n\n  organisatie: Organisatie;\n}\n"]},"metadata":{},"sourceType":"module"}