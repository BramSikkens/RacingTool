{"ast":null,"code":"import _initializerDefineProperty from \"/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/propagandareact/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/propagandareact/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/propagandareact/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _class, _descriptor;\n\nimport { Type } from \"class-transformer\";\nimport RaceEntry from \"../Abstracts/RaceEntry\";\nexport let Reeks = (_dec = Type(() => RaceEntry), (_class = class Reeks {\n  constructor(categorie, maxAantalBanen) {\n    this._categorie = void 0;\n\n    _initializerDefineProperty(this, \"_baanVerdeling\", _descriptor, this);\n\n    this._startTijd = void 0;\n    this._maxAantalBanen = void 0;\n    this._isFull = void 0;\n    this._categorie = categorie;\n    this._maxAantalBanen = maxAantalBanen;\n    this._baanVerdeling = new Map();\n    this._isFull = false;\n  }\n\n  get categorie() {\n    return this._categorie;\n  }\n\n  get baanVerdeling() {\n    return this._baanVerdeling;\n  }\n\n  set startTijd(tijd) {\n    this._startTijd = tijd;\n  }\n\n  get startTijd() {\n    return this._startTijd;\n  }\n\n  addDeelnemer(deelnemer, baanNr) {\n    if (this._isFull) {\n      throw Error(\"Reeks is Vol\");\n    }\n\n    if (deelnemer.categorie !== this._categorie) {\n      throw Error(\"Deze deelnemer heeft niet de juiste categorie\");\n    }\n\n    if (baanNr) {\n      if (this._baanVerdeling.get(baanNr) == undefined) {\n        this._baanVerdeling.set(baanNr, deelnemer);\n      } else {\n        throw Error(\"Baan is niet vrij\");\n      }\n    } else {\n      if (this._maxAantalBanen != undefined) {\n        for (let baan = 1; baan <= this._maxAantalBanen; baan++) {\n          if (!this._baanVerdeling.has(baan)) {\n            this._baanVerdeling.set(baan, deelnemer);\n\n            break;\n          }\n        }\n\n        this._isFull = this._baanVerdeling.size == this._maxAantalBanen;\n      } else {\n        this.baanVerdeling.set(this._baanVerdeling.size + 1, deelnemer);\n      }\n    }\n\n    return this._baanVerdeling;\n  }\n\n  removeDeelnemer(id) {\n    console.log(\"user to remove: \", id);\n    let deelnemerToRemove;\n    this.baanVerdeling.forEach((deelnemer, key) => {\n      if (deelnemer._id == id) {\n        deelnemerToRemove = deelnemer;\n        this.baanVerdeling.delete(key);\n        return deelnemerToRemove;\n      }\n    });\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_baanVerdeling\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: null\n})), _class));","map":{"version":3,"sources":["/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/PropagandaSysteem/src/DomainLayer/Entities/Reeks.ts"],"names":["Type","RaceEntry","Reeks","constructor","categorie","maxAantalBanen","_categorie","_startTijd","_maxAantalBanen","_isFull","_baanVerdeling","Map","baanVerdeling","startTijd","tijd","addDeelnemer","deelnemer","baanNr","Error","get","undefined","set","baan","has","size","removeDeelnemer","id","console","log","deelnemerToRemove","forEach","key","_id","delete"],"mappings":";;;;;;AAAA,SAASA,IAAT,QAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAGA,WAAaC,KAAb,WAEGF,IAAI,CAAC,MAAMC,SAAP,CAFP,YAAO,MAAMC,KAAN,CAAY;AAQjBC,EAAAA,WAAW,CAACC,SAAD,EAAuBC,cAAvB,EAAgD;AAAA,SAPnDC,UAOmD;;AAAA;;AAAA,SAJ3DC,UAI2D;AAAA,SAH3DC,eAG2D;AAAA,SAF3DC,OAE2D;AACzD,SAAKH,UAAL,GAAkBF,SAAlB;AACA,SAAKI,eAAL,GAAuBH,cAAvB;AACA,SAAKK,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;AACA,SAAKF,OAAL,GAAe,KAAf;AACD;;AAEY,MAATL,SAAS,GAAc;AACzB,WAAO,KAAKE,UAAZ;AACD;;AAEgB,MAAbM,aAAa,GAA2B;AAC1C,WAAO,KAAKF,cAAZ;AACD;;AAEY,MAATG,SAAS,CAACC,IAAD,EAAa;AACxB,SAAKP,UAAL,GAAkBO,IAAlB;AACD;;AAEY,MAATD,SAAS,GAAS;AACpB,WAAO,KAAKN,UAAZ;AACD;;AAEDQ,EAAAA,YAAY,CAACC,SAAD,EAAuBC,MAAvB,EAAgE;AAC1E,QAAI,KAAKR,OAAT,EAAkB;AAChB,YAAMS,KAAK,CAAC,cAAD,CAAX;AACD;;AACD,QAAIF,SAAS,CAACZ,SAAV,KAAwB,KAAKE,UAAjC,EAA6C;AAC3C,YAAMY,KAAK,CAAC,+CAAD,CAAX;AACD;;AAED,QAAID,MAAJ,EAAY;AACV,UAAI,KAAKP,cAAL,CAAoBS,GAApB,CAAwBF,MAAxB,KAAmCG,SAAvC,EAAkD;AAChD,aAAKV,cAAL,CAAoBW,GAApB,CAAwBJ,MAAxB,EAAgCD,SAAhC;AACD,OAFD,MAEO;AACL,cAAME,KAAK,CAAC,mBAAD,CAAX;AACD;AACF,KAND,MAMO;AACL,UAAI,KAAKV,eAAL,IAAwBY,SAA5B,EAAuC;AACrC,aAAK,IAAIE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,IAAI,KAAKd,eAAhC,EAAiDc,IAAI,EAArD,EAAyD;AACvD,cAAI,CAAC,KAAKZ,cAAL,CAAoBa,GAApB,CAAwBD,IAAxB,CAAL,EAAoC;AAClC,iBAAKZ,cAAL,CAAoBW,GAApB,CAAwBC,IAAxB,EAA8BN,SAA9B;;AACA;AACD;AACF;;AACD,aAAKP,OAAL,GAAe,KAAKC,cAAL,CAAoBc,IAApB,IAA4B,KAAKhB,eAAhD;AACD,OARD,MAQO;AACL,aAAKI,aAAL,CAAmBS,GAAnB,CAAuB,KAAKX,cAAL,CAAoBc,IAApB,GAA2B,CAAlD,EAAqDR,SAArD;AACD;AACF;;AACD,WAAO,KAAKN,cAAZ;AACD;;AAEDe,EAAAA,eAAe,CAACC,EAAD,EAAkB;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,EAAhC;AACA,QAAIG,iBAAJ;AACA,SAAKjB,aAAL,CAAmBkB,OAAnB,CAA2B,CAACd,SAAD,EAAuBe,GAAvB,KAAuC;AAChE,UAAIf,SAAS,CAACgB,GAAV,IAAiBN,EAArB,EAAyB;AACvBG,QAAAA,iBAAiB,GAAGb,SAApB;AACA,aAAKJ,aAAL,CAAmBqB,MAAnB,CAA0BF,GAA1B;AACA,eAAOF,iBAAP;AACD;AACF,KAND;AAOD;;AAvEgB,CAAnB;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { Type } from \"class-transformer\";\nimport RaceEntry from \"../Abstracts/RaceEntry\";\nimport { Categorie } from \"../Enums/Categorie\";\n\nexport class Reeks {\n  private _categorie: Categorie;\n  @Type(() => RaceEntry)\n  _baanVerdeling: Map<number, RaceEntry>;\n  _startTijd: Date;\n  _maxAantalBanen: number | undefined;\n  _isFull: boolean;\n\n  constructor(categorie: Categorie, maxAantalBanen?: number) {\n    this._categorie = categorie;\n    this._maxAantalBanen = maxAantalBanen;\n    this._baanVerdeling = new Map();\n    this._isFull = false;\n  }\n\n  get categorie(): Categorie {\n    return this._categorie;\n  }\n\n  get baanVerdeling(): Map<number, RaceEntry> {\n    return this._baanVerdeling;\n  }\n\n  set startTijd(tijd: Date) {\n    this._startTijd = tijd;\n  }\n\n  get startTijd(): Date {\n    return this._startTijd;\n  }\n\n  addDeelnemer(deelnemer: RaceEntry, baanNr?: number): Map<number, RaceEntry> {\n    if (this._isFull) {\n      throw Error(\"Reeks is Vol\");\n    }\n    if (deelnemer.categorie !== this._categorie) {\n      throw Error(\"Deze deelnemer heeft niet de juiste categorie\");\n    }\n\n    if (baanNr) {\n      if (this._baanVerdeling.get(baanNr) == undefined) {\n        this._baanVerdeling.set(baanNr, deelnemer);\n      } else {\n        throw Error(\"Baan is niet vrij\");\n      }\n    } else {\n      if (this._maxAantalBanen != undefined) {\n        for (let baan = 1; baan <= this._maxAantalBanen; baan++) {\n          if (!this._baanVerdeling.has(baan)) {\n            this._baanVerdeling.set(baan, deelnemer);\n            break;\n          }\n        }\n        this._isFull = this._baanVerdeling.size == this._maxAantalBanen;\n      } else {\n        this.baanVerdeling.set(this._baanVerdeling.size + 1, deelnemer);\n      }\n    }\n    return this._baanVerdeling;\n  }\n\n  removeDeelnemer(id: string): any {\n    console.log(\"user to remove: \", id);\n    let deelnemerToRemove: RaceEntry;\n    this.baanVerdeling.forEach((deelnemer: RaceEntry, key: number) => {\n      if (deelnemer._id == id) {\n        deelnemerToRemove = deelnemer;\n        this.baanVerdeling.delete(key);\n        return deelnemerToRemove;\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}