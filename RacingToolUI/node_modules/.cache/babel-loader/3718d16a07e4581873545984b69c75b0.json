{"ast":null,"code":"import _initializerDefineProperty from \"/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/propagandareact/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/propagandareact/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/propagandareact/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _class, _descriptor;\n\nimport { Type } from \"class-transformer\";\nimport { Categorie } from \"../Enums/Categorie\";\nimport { shuffleDeelnemersLijst, VoegInschrijvingenToe } from \"../utils\";\nimport { Deelnemer } from \"./Deelnemer\";\nimport { Reeks } from \"./Reeks\";\nimport Team from \"./Team\";\nlet Race = (_dec = Type(() => Reeks), (_class = class Race {\n  constructor(afstand, bootType) {\n    _initializerDefineProperty(this, \"_reeksen\", _descriptor, this);\n\n    this._afstand = void 0;\n    this._bootType = void 0;\n    this._afstand = afstand;\n    this._bootType = bootType;\n  }\n\n  verkrijgDeelnemers() {\n    let deelnemerArray = [];\n    let alleReeksen = this.verkrijgReeksen([...this._reeksen.keys()]);\n    alleReeksen.forEach(reeks => {\n      reeks.baanVerdeling.forEach((value, key) => {\n        if (value instanceof Deelnemer) {\n          deelnemerArray.push(value);\n        } else if (value instanceof Team) {\n          value._team.forEach(deelnemer => {\n            deelnemerArray.push(deelnemer);\n          });\n        }\n      });\n    }); //filter\n\n    deelnemerArray = deelnemerArray.filter((item, pos) => {\n      return deelnemerArray.indexOf(item) == pos;\n    });\n    return deelnemerArray;\n  }\n\n  verkrijgReeksen(rondes) {\n    let reeksenArray = new Array();\n    rondes.forEach(ronde => {\n      if (this._reeksen.has(ronde)) {\n        let reeksenInRonde = this._reeksen.get(ronde);\n\n        for (let key of reeksenInRonde.keys()) {\n          let reeksen = reeksenInRonde.get(key);\n          reeksenArray.push(...reeksen);\n        }\n      }\n    });\n    return reeksenArray;\n  }\n\n  verkrijgRondes() {\n    return Array.from(this._reeksen.keys());\n  }\n\n  creerRonde(title, deelnemers, maxAantalBanen) {\n    this._reeksen.set(title, new Map());\n\n    if (deelnemers) {\n      this.schrijfIn(deelnemers, [title], maxAantalBanen);\n    }\n  }\n\n  schrijfIn(deelnemers, rondes, maxAantalBanen) {\n    rondes.forEach(ronde => {\n      if (!this._reeksen.has(ronde)) {\n        throw Error(\"Ronde bestaat niet\");\n      } else {\n        let existingInschrijvingen = this._reeksen.get(ronde);\n\n        this._reeksen.set(ronde, VoegInschrijvingenToe(shuffleDeelnemersLijst(deelnemers), existingInschrijvingen, maxAantalBanen));\n      }\n    });\n  }\n\n  schrijfUit(id, rondes) {\n    rondes.forEach(ronde => {\n      if (!this._reeksen.has(ronde)) {\n        throw Error(\"Ronde bestaat niet\");\n      } else {\n        for (let key in Categorie) {\n          var _this$_reeksen$get, _this$_reeksen$get$ge;\n\n          (_this$_reeksen$get = this._reeksen.get(ronde)) === null || _this$_reeksen$get === void 0 ? void 0 : (_this$_reeksen$get$ge = _this$_reeksen$get.get(key)) === null || _this$_reeksen$get$ge === void 0 ? void 0 : _this$_reeksen$get$ge.forEach((reeks, index) => {\n            reeks.removeDeelnemer(id);\n          });\n        }\n      }\n    });\n  }\n\n}, (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"_reeksen\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return new Map();\n  }\n})), _class));\nexport { Race as default };","map":{"version":3,"sources":["/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/PropagandaSysteem/src/DomainLayer/Entities/Race.ts"],"names":["Type","Categorie","shuffleDeelnemersLijst","VoegInschrijvingenToe","Deelnemer","Reeks","Team","Race","constructor","afstand","bootType","_afstand","_bootType","verkrijgDeelnemers","deelnemerArray","alleReeksen","verkrijgReeksen","_reeksen","keys","forEach","reeks","baanVerdeling","value","key","push","_team","deelnemer","filter","item","pos","indexOf","rondes","reeksenArray","Array","ronde","has","reeksenInRonde","get","reeksen","verkrijgRondes","from","creerRonde","title","deelnemers","maxAantalBanen","set","Map","schrijfIn","Error","existingInschrijvingen","schrijfUit","id","index","removeDeelnemer"],"mappings":"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","sourcesContent":["import { Type } from \"class-transformer\";\nimport RaceEntry from \"../Abstracts/RaceEntry\";\nimport { BootType } from \"../Enums/BootType\";\nimport { Categorie } from \"../Enums/Categorie\";\nimport { shuffleDeelnemersLijst, VoegInschrijvingenToe } from \"../utils\";\nimport { Deelnemer } from \"./Deelnemer\";\nimport { Reeks } from \"./Reeks\";\nimport Team from \"./Team\";\n\nexport default class Race {\n  @Type(() => Reeks)\n  _reeksen: Map<string, Map<Categorie, Array<Reeks>>> = new Map();\n  _afstand: string;\n  _bootType: BootType;\n\n  constructor(afstand: string, bootType: BootType) {\n    this._afstand = afstand;\n    this._bootType = bootType;\n  }\n\n  verkrijgDeelnemers(): Array<Deelnemer> {\n    let deelnemerArray: Array<Deelnemer> = [];\n    let alleReeksen: Array<Reeks> = this.verkrijgReeksen([\n      ...this._reeksen.keys(),\n    ]);\n\n    alleReeksen.forEach((reeks: Reeks) => {\n      reeks.baanVerdeling.forEach((value: RaceEntry, key: number) => {\n        if (value instanceof Deelnemer) {\n          deelnemerArray.push(value as Deelnemer);\n        } else if (value instanceof Team) {\n          (value as Team)._team.forEach((deelnemer: Deelnemer) => {\n            deelnemerArray.push(deelnemer as Deelnemer);\n          });\n        }\n      });\n    });\n\n    //filter\n    deelnemerArray = deelnemerArray.filter((item, pos) => {\n      return deelnemerArray.indexOf(item) == pos;\n    });\n\n    return deelnemerArray;\n  }\n\n  verkrijgReeksen(rondes: Array<string>): Array<Reeks> {\n    let reeksenArray: Array<Reeks> = new Array<Reeks>();\n    rondes.forEach((ronde: string) => {\n      if (this._reeksen.has(ronde)) {\n        let reeksenInRonde: Map<Categorie, Array<Reeks>> = this._reeksen.get(\n          ronde\n        )!;\n\n        for (let key of reeksenInRonde.keys()) {\n          let reeksen: Array<Reeks> = reeksenInRonde.get(key as Categorie)!;\n          reeksenArray.push(...reeksen);\n        }\n      }\n    });\n    return reeksenArray;\n  }\n\n  verkrijgRondes(): Array<string> {\n    return Array.from(this._reeksen.keys());\n  }\n\n  creerRonde(\n    title: string,\n    deelnemers?: Array<RaceEntry>,\n    maxAantalBanen?: number\n  ) {\n    this._reeksen.set(title, new Map<Categorie, Array<Reeks>>());\n    if (deelnemers) {\n      this.schrijfIn(deelnemers, [title], maxAantalBanen);\n    }\n  }\n\n  schrijfIn(\n    deelnemers: Array<RaceEntry>,\n    rondes: Array<string>,\n    maxAantalBanen?: number\n  ) {\n    rondes.forEach((ronde: string) => {\n      if (!this._reeksen.has(ronde)) {\n        throw Error(\"Ronde bestaat niet\");\n      } else {\n        let existingInschrijvingen = this._reeksen.get(ronde);\n        this._reeksen.set(\n          ronde,\n          VoegInschrijvingenToe(\n            shuffleDeelnemersLijst(deelnemers),\n            existingInschrijvingen,\n            maxAantalBanen\n          )\n        );\n      }\n    });\n  }\n\n  schrijfUit(id: string, rondes: [string]) {\n    rondes.forEach((ronde: string) => {\n      if (!this._reeksen.has(ronde)) {\n        throw Error(\"Ronde bestaat niet\");\n      } else {\n        for (let key in Categorie) {\n          this._reeksen\n            .get(ronde)\n            ?.get(key as Categorie)\n            ?.forEach((reeks: Reeks, index) => {\n              reeks.removeDeelnemer(id);\n            });\n        }\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}