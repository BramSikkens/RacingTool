{"ast":null,"code":"import Race from \"../../../DomainLayer/Entities/Race\";\nexport function CreateRace(request, ApplicationState) {\n  let organisatie = ApplicationState.organisatie;\n  let newRace = new Race(request.afstand, request.boottype, request.aantalBanen);\n  organisatie.addWedstrijd(newRace, request.titel);\n  let createdRace = organisatie.inschrijvingen.get(request.titel);\n\n  if (createdRace) {\n    request.rondes.forEach(ronde => {\n      createdRace === null || createdRace === void 0 ? void 0 : createdRace.creerRonde(ronde);\n    });\n  }\n\n  return {\n    status: createdRace ? \"succes\" : \"fail\",\n    message: createdRace ? \"raceCreated\" : \"Race Could not be created\",\n    organisatie: {\n      naam: organisatie.naam\n    },\n    race: createdRace ? {\n      titel: request.titel,\n      afstand: createdRace._afstand,\n      boottype: createdRace._bootType\n    } : undefined,\n    rondes: request.rondes\n  };\n}\n_c = CreateRace;\nexport function VerkrijgReeksenVanRonde(request, applicationState) {\n  let race = applicationState.organisatie.inschrijvingen.get(request.raceTitle);\n  let reeksen;\n\n  if (race) {\n    reeksen = race.verkrijgReeksen([request.rondeTitle]);\n  }\n\n  if (reeksen) {\n    return {\n      status: \"suces\",\n      message: \"ok\",\n      reeksen: reeksen.map(reeks => {\n        var _reeks$startTijd;\n\n        return {\n          categorie: reeks.categorie.toString(),\n          starttijd: (_reeks$startTijd = reeks.startTijd) === null || _reeks$startTijd === void 0 ? void 0 : _reeks$startTijd.toISOString(),\n          baanVerdeling: Array.from(reeks.baanVerdeling.entries()).map(entry => {\n            return {\n              baan: entry[0].toString(),\n              club: entry[1].club,\n              naam: entry[1]._naam,\n              category: entry[1].categorie,\n              team: entry[1]._team\n            };\n          })\n        };\n      })\n    };\n  } else {\n    return {\n      status: \"failed\",\n      message: \"something went wrong\"\n    };\n  }\n}\n_c2 = VerkrijgReeksenVanRonde;\nexport function verkrijgDeelnemersFromRace(request, applicationState) {\n  const race = applicationState.organisatie.inschrijvingen.get(request.raceTitle);\n  console.log(race);\n\n  if (race !== undefined) {\n    let deelnemersArray = race.verkrijgDeelnemers();\n    console.log(\"deelnemers\", deelnemersArray);\n    return {\n      status: \"Succes\",\n      message: \"Received Deelnemers\",\n      deelnemers: deelnemersArray.map(deelnemer => {\n        return {\n          naam: deelnemer.naam,\n          category: deelnemer.categorie.toString(),\n          club: deelnemer.club\n        };\n      })\n    };\n  } else {\n    return {\n      status: \"Failed\",\n      message: \"Something went wrong\"\n    };\n  }\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CreateRace\");\n$RefreshReg$(_c2, \"VerkrijgReeksenVanRonde\");","map":{"version":3,"sources":["/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/PropagandaSysteem/src/ApplicationLayer/Organisatie/Race/RaceUseCases.ts"],"names":["Race","CreateRace","request","ApplicationState","organisatie","newRace","afstand","boottype","aantalBanen","addWedstrijd","titel","createdRace","inschrijvingen","get","rondes","forEach","ronde","creerRonde","status","message","naam","race","_afstand","_bootType","undefined","VerkrijgReeksenVanRonde","applicationState","raceTitle","reeksen","verkrijgReeksen","rondeTitle","map","reeks","categorie","toString","starttijd","startTijd","toISOString","baanVerdeling","Array","from","entries","entry","baan","club","_naam","category","team","_team","verkrijgDeelnemersFromRace","console","log","deelnemersArray","verkrijgDeelnemers","deelnemers","deelnemer"],"mappings":"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","sourcesContent":["import RaceEntry from \"../../../DomainLayer/Abstracts/RaceEntry\";\nimport { Deelnemer } from \"../../../DomainLayer/Entities/Deelnemer\";\nimport Organisatie from \"../../../DomainLayer/Entities/Organisatie\";\nimport Race from \"../../../DomainLayer/Entities/Race\";\nimport { Reeks } from \"../../../DomainLayer/Entities/Reeks\";\nimport Team from \"../../../DomainLayer/Entities/Team\";\nimport { BootType } from \"../../../DomainLayer/Enums/BootType\";\nimport ApplicationState from \"../../ApplicationState\";\nimport {\n  CreateRaceRequest,\n  VerkrijgDeelnemersVanRaceRequest,\n  VerkrijgReeksenVanRondeDTO,\n} from \"./RaceRequests\";\nimport {\n  CreatedRaceResponse,\n  VerkrijgDeelnemersFromRaceResponse,\n  VerkrijgReeksenVanRondeResponse,\n} from \"./RaceResponses\";\n\nexport function CreateRace(\n  request: CreateRaceRequest,\n  ApplicationState: ApplicationState\n): CreatedRaceResponse {\n  let organisatie: Organisatie = ApplicationState.organisatie;\n  let newRace: Race = new Race(\n    request.afstand,\n    request.boottype as BootType.K1,\n    request.aantalBanen\n  );\n  organisatie.addWedstrijd(newRace, request.titel);\n\n  let createdRace: Race | undefined = organisatie.inschrijvingen.get(\n    request.titel\n  );\n\n  if (createdRace) {\n    request.rondes.forEach((ronde: string) => {\n      createdRace?.creerRonde(ronde);\n    });\n  }\n\n  return {\n    status: createdRace ? \"succes\" : \"fail\",\n    message: createdRace ? \"raceCreated\" : \"Race Could not be created\",\n    organisatie: {\n      naam: organisatie.naam,\n    },\n    race: createdRace\n      ? {\n          titel: request.titel,\n          afstand: createdRace._afstand,\n          boottype: createdRace._bootType as string,\n        }\n      : undefined,\n    rondes: request.rondes,\n  };\n}\n\nexport function VerkrijgReeksenVanRonde(\n  request: VerkrijgReeksenVanRondeDTO,\n  applicationState: ApplicationState\n): VerkrijgReeksenVanRondeResponse {\n  let race: Race | undefined = applicationState.organisatie.inschrijvingen.get(\n    request.raceTitle\n  );\n\n  let reeksen: Reeks[] | undefined;\n\n  if (race) {\n    reeksen = race.verkrijgReeksen([request.rondeTitle]);\n  }\n\n  if (reeksen) {\n    return {\n      status: \"suces\",\n      message: \"ok\",\n      reeksen: reeksen.map((reeks: Reeks) => {\n        return {\n          categorie: reeks.categorie.toString(),\n          starttijd: reeks.startTijd?.toISOString(),\n          baanVerdeling: Array.from(reeks.baanVerdeling.entries()).map(\n            (entry) => {\n              return {\n                baan: entry[0].toString(),\n                club: entry[1].club,\n                naam: (entry[1] as Deelnemer)._naam,\n                category: (entry[1] as Deelnemer).categorie,\n                team: (entry[1] as Team)._team,\n              };\n            }\n          ),\n        };\n      }),\n    };\n  } else {\n    return {\n      status: \"failed\",\n      message: \"something went wrong\",\n    };\n  }\n}\n\nexport function verkrijgDeelnemersFromRace(\n  request: VerkrijgDeelnemersVanRaceRequest,\n  applicationState: ApplicationState\n): VerkrijgDeelnemersFromRaceResponse {\n  const race: Race | undefined =\n    applicationState.organisatie.inschrijvingen.get(request.raceTitle);\n\n  console.log(race);\n\n  if (race !== undefined) {\n    let deelnemersArray: Array<Deelnemer> = race.verkrijgDeelnemers();\n    console.log(\"deelnemers\", deelnemersArray);\n    return {\n      status: \"Succes\",\n      message: \"Received Deelnemers\",\n      deelnemers: deelnemersArray.map((deelnemer: Deelnemer) => {\n        return {\n          naam: deelnemer.naam,\n          category: deelnemer.categorie.toString(),\n          club: deelnemer.club,\n        };\n      }),\n    };\n  } else {\n    return {\n      status: \"Failed\",\n      message: \"Something went wrong\",\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}