{"ast":null,"code":"import Race from \"../../../DomainLayer/Entities/Race\";\nexport function CreateRace(request, ApplicationState) {\n  let organisatie = ApplicationState.organisatie;\n  let newRace = new Race(request.afstand, request.boottype);\n  organisatie.addWedstrijd(newRace, request.titel);\n  let createdRace = organisatie.inschrijvingen.get(request.titel);\n\n  if (createdRace) {\n    request.rondes.forEach(ronde => {\n      createdRace === null || createdRace === void 0 ? void 0 : createdRace.creerRonde(ronde);\n    });\n  }\n\n  return {\n    status: createdRace ? \"succes\" : \"fail\",\n    message: createdRace ? \"raceCreated\" : \"Race Could not be created\",\n    organisatie: {\n      naam: organisatie.naam\n    },\n    race: createdRace ? {\n      titel: request.titel,\n      afstand: createdRace._afstand,\n      boottype: createdRace._bootType\n    } : undefined,\n    rondes: request.rondes\n  };\n}\n_c = CreateRace;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateRace\");","map":{"version":3,"sources":["/Users/bramsikkens/Documents/Ontwikkeling/Propaganda/PropagandaSysteem/src/ApplicationLayer/Organisatie/Race/RaceUseCases.ts"],"names":["Race","CreateRace","request","ApplicationState","organisatie","newRace","afstand","boottype","addWedstrijd","titel","createdRace","inschrijvingen","get","rondes","forEach","ronde","creerRonde","status","message","naam","race","_afstand","_bootType","undefined"],"mappings":"AACA,OAAOA,IAAP,MAAiB,oCAAjB;AAMA,OAAO,SAASC,UAAT,CACLC,OADK,EAELC,gBAFK,EAGgB;AACrB,MAAIC,WAAwB,GAAGD,gBAAgB,CAACC,WAAhD;AACA,MAAIC,OAAa,GAAG,IAAIL,IAAJ,CAClBE,OAAO,CAACI,OADU,EAElBJ,OAAO,CAACK,QAFU,CAApB;AAIAH,EAAAA,WAAW,CAACI,YAAZ,CAAyBH,OAAzB,EAAkCH,OAAO,CAACO,KAA1C;AAEA,MAAIC,WAA6B,GAAGN,WAAW,CAACO,cAAZ,CAA2BC,GAA3B,CAClCV,OAAO,CAACO,KAD0B,CAApC;;AAIA,MAAIC,WAAJ,EAAiB;AACfR,IAAAA,OAAO,CAACW,MAAR,CAAeC,OAAf,CAAwBC,KAAD,IAAmB;AACxCL,MAAAA,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEM,UAAb,CAAwBD,KAAxB;AACD,KAFD;AAGD;;AAED,SAAO;AACLE,IAAAA,MAAM,EAAEP,WAAW,GAAG,QAAH,GAAc,MAD5B;AAELQ,IAAAA,OAAO,EAAER,WAAW,GAAG,aAAH,GAAmB,2BAFlC;AAGLN,IAAAA,WAAW,EAAE;AACXe,MAAAA,IAAI,EAAEf,WAAW,CAACe;AADP,KAHR;AAMLC,IAAAA,IAAI,EAAEV,WAAW,GACb;AACED,MAAAA,KAAK,EAAEP,OAAO,CAACO,KADjB;AAEEH,MAAAA,OAAO,EAAEI,WAAW,CAACW,QAFvB;AAGEd,MAAAA,QAAQ,EAAEG,WAAW,CAACY;AAHxB,KADa,GAMbC,SAZC;AAaLV,IAAAA,MAAM,EAAEX,OAAO,CAACW;AAbX,GAAP;AAeD;KApCeZ,U","sourcesContent":["import Organisatie from \"../../../DomainLayer/Entities/Organisatie\";\nimport Race from \"../../../DomainLayer/Entities/Race\";\nimport { BootType } from \"../../../DomainLayer/Enums/BootType\";\nimport ApplicationState from \"../../ApplicationState\";\nimport { CreateRaceRequest } from \"./RaceRequests\";\nimport { CreatedRaceResponse } from \"./RaceResponses\";\n\nexport function CreateRace(\n  request: CreateRaceRequest,\n  ApplicationState: ApplicationState\n): CreatedRaceResponse {\n  let organisatie: Organisatie = ApplicationState.organisatie;\n  let newRace: Race = new Race(\n    request.afstand,\n    request.boottype as BootType.K1\n  );\n  organisatie.addWedstrijd(newRace, request.titel);\n\n  let createdRace: Race | undefined = organisatie.inschrijvingen.get(\n    request.titel\n  );\n\n  if (createdRace) {\n    request.rondes.forEach((ronde: string) => {\n      createdRace?.creerRonde(ronde);\n    });\n  }\n\n  return {\n    status: createdRace ? \"succes\" : \"fail\",\n    message: createdRace ? \"raceCreated\" : \"Race Could not be created\",\n    organisatie: {\n      naam: organisatie.naam,\n    },\n    race: createdRace\n      ? {\n          titel: request.titel,\n          afstand: createdRace._afstand,\n          boottype: createdRace._bootType as string,\n        }\n      : undefined,\n    rondes: request.rondes,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}